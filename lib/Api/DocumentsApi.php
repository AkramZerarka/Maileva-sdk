<?php

/**
 * DocumentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Maileva\Client
 * @author   Maileva Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maileva / Envoi et Suivi de Lettres Recommandées En Ligne distribuées par le facteur
 *
 * API pour envoyer et suivre des Lettres Recommandées En Ligne distribuées par le facteur  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (noir & blanc ou couleur, recto ou recto-verso, avec ou sans AR …).  - suivre la production (date de planification, suivi de l’envoi…).  Voir la documentation \"notification_center\".
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Maileva Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Maileva\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Maileva\Client\ApiException;
use Maileva\Client\Configuration;
use Maileva\Client\HeaderSelector;
use Maileva\Client\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  Maileva\Client
 * @author   Maileva Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDelete
     *
     * Suppression d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdDocumentsDocumentIdDelete($sending_id, $document_id)
    {
        $this->sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo($sending_id, $document_id);
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo
     *
     * Suppression d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo($sending_id, $document_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdDeleteRequest($sending_id, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteAsync
     *
     * Suppression d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteAsync($sending_id, $document_id)
    {
        return $this->sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo($sending_id, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo
     *
     * Suppression d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo($sending_id, $document_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdDeleteRequest($sending_id, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdDelete'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdDocumentsDocumentIdDeleteRequest($sending_id, $document_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdDocumentsDocumentIdDelete'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling sendingsSendingIdDocumentsDocumentIdDelete'
            );
        }

        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGet
     *
     * Détail d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\DocumentResponse
     */
    public function sendingsSendingIdDocumentsDocumentIdGet($sending_id, $document_id)
    {
        list($response) = $this->sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo($sending_id, $document_id);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo
     *
     * Détail d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo($sending_id, $document_id)
    {
        $returnType = '\Maileva\Client\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsDocumentIdGetRequest($sending_id, $document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetAsync
     *
     * Détail d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdGetAsync($sending_id, $document_id)
    {
        return $this->sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo($sending_id, $document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo
     *
     * Détail d'un document
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo($sending_id, $document_id)
    {
        $returnType = '\Maileva\Client\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsDocumentIdGetRequest($sending_id, $document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdDocumentsDocumentIdGetRequest($sending_id, $document_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdDocumentsDocumentIdGet'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling sendingsSendingIdDocumentsDocumentIdGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPost
     *
     * Classement des documents
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  \Maileva\Client\Model\Priority $body body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPost($sending_id, $document_id, $body = null)
    {
        $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo($sending_id, $document_id, $body);
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo
     *
     * Classement des documents
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  \Maileva\Client\Model\Priority $body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo($sending_id, $document_id, $body = null)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sending_id, $document_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsync
     *
     * Classement des documents
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  \Maileva\Client\Model\Priority $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsync($sending_id, $document_id, $body = null)
    {
        return $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo($sending_id, $document_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo
     *
     * Classement des documents
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  \Maileva\Client\Model\Priority $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo($sending_id, $document_id, $body = null)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sending_id, $document_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $document_id Identifiant du document (required)
     * @param  \Maileva\Client\Model\Priority $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sending_id, $document_id, $body = null)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
            );
        }

        $resourcePath = '/sendings/{sending_id}/documents/{document_id}/set_priority';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsGet
     *
     * Liste des documents d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\DocumentsResponse
     */
    public function sendingsSendingIdDocumentsGet($sending_id, $start_index = '1', $count = '50')
    {
        list($response) = $this->sendingsSendingIdDocumentsGetWithHttpInfo($sending_id, $start_index, $count);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsGetWithHttpInfo
     *
     * Liste des documents d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\DocumentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsGetWithHttpInfo($sending_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\DocumentsResponse';
        $request = $this->sendingsSendingIdDocumentsGetRequest($sending_id, $start_index, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\DocumentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsGetAsync
     *
     * Liste des documents d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsGetAsync($sending_id, $start_index = '1', $count = '50')
    {
        return $this->sendingsSendingIdDocumentsGetAsyncWithHttpInfo($sending_id, $start_index, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsGetAsyncWithHttpInfo
     *
     * Liste des documents d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsGetAsyncWithHttpInfo($sending_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\DocumentsResponse';
        $request = $this->sendingsSendingIdDocumentsGetRequest($sending_id, $start_index, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdDocumentsGetRequest($sending_id, $start_index = '1', $count = '50')
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdDocumentsGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = ObjectSerializer::toQueryValue($start_index, null);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count, null);
        }

        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsPost
     *
     * Ajout d'un document à l'envoi.
     *
     * @param  string $document document (required)
     * @param  \Maileva\Client\Model\SendingssendingIddocumentsMetadata $metadata metadata (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\DocumentResponse
     */
    public function sendingsSendingIdDocumentsPost($document, $metadata, $sending_id)
    {
        list($response) = $this->sendingsSendingIdDocumentsPostWithHttpInfo($document, $metadata, $sending_id);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsPostWithHttpInfo
     *
     * Ajout d'un document à l'envoi.
     *
     * @param  string $document (required)
     * @param  \Maileva\Client\Model\SendingssendingIddocumentsMetadata $metadata (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\DocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsPostWithHttpInfo($document, $metadata, $sending_id)
    {
        $returnType = '\Maileva\Client\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsPostRequest($document, $metadata, $sending_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsPostAsync
     *
     * Ajout d'un document à l'envoi.
     *
     * @param  string $document (required)
     * @param  \Maileva\Client\Model\SendingssendingIddocumentsMetadata $metadata (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsPostAsync($document, $metadata, $sending_id)
    {
        return $this->sendingsSendingIdDocumentsPostAsyncWithHttpInfo($document, $metadata, $sending_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsPostAsyncWithHttpInfo
     *
     * Ajout d'un document à l'envoi.
     *
     * @param  string $document (required)
     * @param  \Maileva\Client\Model\SendingssendingIddocumentsMetadata $metadata (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsPostAsyncWithHttpInfo($document, $metadata, $sending_id)
    {
        $returnType = '\Maileva\Client\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsPostRequest($document, $metadata, $sending_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsPost'
     *
     * @param  string $document (required)
     * @param  \Maileva\Client\Model\SendingssendingIddocumentsMetadata $metadata (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdDocumentsPostRequest($document, $metadata, $sending_id)
    {
        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling sendingsSendingIdDocumentsPost'
            );
        }
        // verify the required parameter 'metadata' is set
        if ($metadata === null || (is_array($metadata) && count($metadata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadata when calling sendingsSendingIdDocumentsPost'
            );
        }
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdDocumentsPost'
            );
        }

        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // form params
        if ($document !== null) {
            $multipart = true;
            $formParams['document'] = GuzzleHttp\Psr7\Utils::tryFopen(ObjectSerializer::toFormValue($document), 'rb');
        }
        // form params
        if ($metadata !== null) {
            $formParams['metadata'] = ObjectSerializer::toFormValue($metadata);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
