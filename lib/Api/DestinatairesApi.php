<?php

/**
 * DestinatairesApi
 * PHP version 5
 *
 * @category Class
 * @package  Maileva\Client
 * @author   Maileva Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Maileva / Envoi et Suivi de Lettres Recommandées En Ligne distribuées par le facteur
 *
 * API pour envoyer et suivre des Lettres Recommandées En Ligne distribuées par le facteur  Elles comprennent les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options (noir & blanc ou couleur, recto ou recto-verso, avec ou sans AR …).  - suivre la production (date de planification, suivi de l’envoi…).  Voir la documentation \"notification_center\".
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Maileva Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Maileva\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Maileva\Client\ApiException;
use Maileva\Client\Configuration;
use Maileva\Client\HeaderSelector;
use Maileva\Client\ObjectSerializer;

/**
 * DestinatairesApi Class Doc Comment
 *
 * @category Class
 * @package  Maileva\Client
 * @author   Maileva Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DestinatairesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation patchRecipient
     *
     * Modification partielle d'un destinataire
     *
     * @param  \Maileva\Client\Model\RecipientCreation $body body (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\RecipientResponse
     */
    public function patchRecipient($body, $sending_id, $recipient_id)
    {
        list($response) = $this->patchRecipientWithHttpInfo($body, $sending_id, $recipient_id);
        return $response;
    }

    /**
     * Operation patchRecipientWithHttpInfo
     *
     * Modification partielle d'un destinataire
     *
     * @param  \Maileva\Client\Model\RecipientCreation $body (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\RecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRecipientWithHttpInfo($body, $sending_id, $recipient_id)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->patchRecipientRequest($body, $sending_id, $recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchRecipientAsync
     *
     * Modification partielle d'un destinataire
     *
     * @param  \Maileva\Client\Model\RecipientCreation $body (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecipientAsync($body, $sending_id, $recipient_id)
    {
        return $this->patchRecipientAsyncWithHttpInfo($body, $sending_id, $recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRecipientAsyncWithHttpInfo
     *
     * Modification partielle d'un destinataire
     *
     * @param  \Maileva\Client\Model\RecipientCreation $body (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecipientAsyncWithHttpInfo($body, $sending_id, $recipient_id)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->patchRecipientRequest($body, $sending_id, $recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRecipient'
     *
     * @param  \Maileva\Client\Model\RecipientCreation $body (required)
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchRecipientRequest($body, $sending_id, $recipient_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchRecipient'
            );
        }
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling patchRecipient'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling patchRecipient'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsDelete
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdRecipientsDelete($sending_id)
    {
        $this->sendingsSendingIdRecipientsDeleteWithHttpInfo($sending_id);
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsDeleteWithHttpInfo($sending_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsDeleteRequest($sending_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteAsync
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsDeleteAsync($sending_id)
    {
        return $this->sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo($sending_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo($sending_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsDeleteRequest($sending_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsDelete'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsDeleteRequest($sending_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsDelete'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsGet
     *
     * Liste des destinataires d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\RecipientsResponse
     */
    public function sendingsSendingIdRecipientsGet($sending_id, $start_index = '1', $count = '50')
    {
        list($response) = $this->sendingsSendingIdRecipientsGetWithHttpInfo($sending_id, $start_index, $count);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsGetWithHttpInfo
     *
     * Liste des destinataires d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\RecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsGetWithHttpInfo($sending_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\RecipientsResponse';
        $request = $this->sendingsSendingIdRecipientsGetRequest($sending_id, $start_index, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\RecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsGetAsync
     *
     * Liste des destinataires d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsGetAsync($sending_id, $start_index = '1', $count = '50')
    {
        return $this->sendingsSendingIdRecipientsGetAsyncWithHttpInfo($sending_id, $start_index, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsGetAsyncWithHttpInfo
     *
     * Liste des destinataires d'un envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsGetAsyncWithHttpInfo($sending_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\RecipientsResponse';
        $request = $this->sendingsSendingIdRecipientsGetRequest($sending_id, $start_index, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsGetRequest($sending_id, $start_index = '1', $count = '50')
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = ObjectSerializer::toQueryValue($start_index, null);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count, null);
        }

        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPost
     *
     * Ajout d'un ou de plusieurs destinataire(s) à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\ImportRecipients $body body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdRecipientsImportsPost($sending_id, $body = null)
    {
        $this->sendingsSendingIdRecipientsImportsPostWithHttpInfo($sending_id, $body);
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostWithHttpInfo
     *
     * Ajout d'un ou de plusieurs destinataire(s) à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\ImportRecipients $body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsImportsPostWithHttpInfo($sending_id, $body = null)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sending_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsync
     *
     * Ajout d'un ou de plusieurs destinataire(s) à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\ImportRecipients $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsync($sending_id, $body = null)
    {
        return $this->sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sending_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo
     *
     * Ajout d'un ou de plusieurs destinataire(s) à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\ImportRecipients $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sending_id, $body = null)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sending_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsImportsPost'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\ImportRecipients $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsImportsPostRequest($sending_id, $body = null)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsImportsPost'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsPost
     *
     * Ajout d'un destinataire à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\RecipientCreation $body body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\RecipientResponse
     */
    public function sendingsSendingIdRecipientsPost($sending_id, $body = null)
    {
        list($response) = $this->sendingsSendingIdRecipientsPostWithHttpInfo($sending_id, $body);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsPostWithHttpInfo
     *
     * Ajout d'un destinataire à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\RecipientCreation $body (optional)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\RecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsPostWithHttpInfo($sending_id, $body = null)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsPostRequest($sending_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsPostAsync
     *
     * Ajout d'un destinataire à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\RecipientCreation $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsPostAsync($sending_id, $body = null)
    {
        return $this->sendingsSendingIdRecipientsPostAsyncWithHttpInfo($sending_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsPostAsyncWithHttpInfo
     *
     * Ajout d'un destinataire à l'envoi
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\RecipientCreation $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsPostAsyncWithHttpInfo($sending_id, $body = null)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsPostRequest($sending_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsPost'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  \Maileva\Client\Model\RecipientCreation $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsPostRequest($sending_id, $body = null)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsPost'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDelete
     *
     * Suprression d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdRecipientsRecipientIdDelete($sending_id, $recipient_id)
    {
        $this->sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo($sending_id, $recipient_id);
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo
     *
     * Suprression d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeleteRequest($sending_id, $recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteAsync
     *
     * Suprression d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteAsync($sending_id, $recipient_id)
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo($sending_id, $recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo
     *
     * Suprression d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeleteRequest($sending_id, $recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDelete'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsRecipientIdDeleteRequest($sending_id, $recipient_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsRecipientIdDelete'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendingsSendingIdRecipientsRecipientIdDelete'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet
     *
     * Liste des statuts de distribution d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\DeliveryStatusesResponse
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet($sending_id, $recipient_id, $start_index = '1', $count = '50')
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo($sending_id, $recipient_id, $start_index, $count);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo
     *
     * Liste des statuts de distribution d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\DeliveryStatusesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo($sending_id, $recipient_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\DeliveryStatusesResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sending_id, $recipient_id, $start_index, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\DeliveryStatusesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsync
     *
     * Liste des statuts de distribution d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsync($sending_id, $recipient_id, $start_index = '1', $count = '50')
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo($sending_id, $recipient_id, $start_index, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo
     *
     * Liste des statuts de distribution d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo($sending_id, $recipient_id, $start_index = '1', $count = '50')
    {
        $returnType = '\Maileva\Client\Model\DeliveryStatusesResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sending_id, $recipient_id, $start_index, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     * @param  float $start_index Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#x27;élément à retourner (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sending_id, $recipient_id, $start_index = '1', $count = '50')
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/delivery_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_index !== null) {
            $queryParams['start_index'] = ObjectSerializer::toQueryValue($start_index, null);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count, null);
        }

        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGet
     *
     * Télécharger l'avis de réception archivé du destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGet($sending_id, $recipient_id)
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetWithHttpInfo($sending_id, $recipient_id);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetWithHttpInfo
     *
     * Télécharger l'avis de réception archivé du destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = 'string';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetRequest($sending_id, $recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetAsync
     *
     * Télécharger l'avis de réception archivé du destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetAsync($sending_id, $recipient_id)
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetAsyncWithHttpInfo($sending_id, $recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetAsyncWithHttpInfo
     *
     * Télécharger l'avis de réception archivé du destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetAsyncWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = 'string';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetRequest($sending_id, $recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGetRequest($sending_id, $recipient_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGet'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendingsSendingIdRecipientsRecipientIdDownloadAcknowledgementOfReceiptGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/download_acknowledgement_of_receipt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet
     *
     * Télécharger le courrier envoyé au destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet($sending_id, $recipient_id)
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo($sending_id, $recipient_id);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo
     *
     * Télécharger le courrier envoyé au destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = 'string';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sending_id, $recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsync
     *
     * Télécharger le courrier envoyé au destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsync($sending_id, $recipient_id)
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo($sending_id, $recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo
     *
     * Télécharger le courrier envoyé au destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = 'string';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sending_id, $recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sending_id, $recipient_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/download_archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGet
     *
     * Détail d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Maileva\Client\Model\RecipientResponse
     */
    public function sendingsSendingIdRecipientsRecipientIdGet($sending_id, $recipient_id)
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo($sending_id, $recipient_id);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo
     *
     * Détail d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \Maileva\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Maileva\Client\Model\RecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdGetRequest($sending_id, $recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maileva\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetAsync
     *
     * Détail d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdGetAsync($sending_id, $recipient_id)
    {
        return $this->sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo($sending_id, $recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo
     *
     * Détail d'un destinataire
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo($sending_id, $recipient_id)
    {
        $returnType = '\Maileva\Client\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdGetRequest($sending_id, $recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdGet'
     *
     * @param  string $sending_id Identifiant d&#x27;un envoi (required)
     * @param  string $recipient_id Identifiant du destinataire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendingsSendingIdRecipientsRecipientIdGetRequest($sending_id, $recipient_id)
    {
        // verify the required parameter 'sending_id' is set
        if ($sending_id === null || (is_array($sending_id) && count($sending_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sending_id when calling sendingsSendingIdRecipientsRecipientIdGet'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendingsSendingIdRecipientsRecipientIdGet'
            );
        }

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sending_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sending_id),
                $resourcePath
            );
        }
        // path params
        if ($recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipient_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
